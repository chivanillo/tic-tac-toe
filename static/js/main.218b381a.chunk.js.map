{"version":3,"sources":["Square.js","Board.js","helper.js","Game.js","index.js"],"names":["Square","className","onClick","props","style","this","beautifySquare","value","Component","Board","i","key","squares","Array","from","length","boardSize","item","row","col","renderSquare","isSquareFull","calculateWinner","lines","a","b","c","winner","lineWinner","isDraw","Game","state","history","fill","rowClickedSquare","colClickedSquare","stepNumber","xIsNext","isReversed","slice","current","newHistory","concat","Math","floor","setState","step","winnerData","defaultSquareColor","backgroundColor","reverse","status","moves","map","move","realMove","desc","jumpTo","handleClick","handleSort","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.218b381a.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Square extends Component {\n  render() {\n    return (\n      <button\n        className=\"square\"\n        onClick={() => this.props.onClick()}\n        style={this.props.beautifySquare()}\n      >\n        {this.props.value}\n      </button>\n    );\n  }\n}\n\nexport default Square;\n","import React, {Component} from 'react';\nimport Square from './Square';\n\nclass Board extends Component {\n  renderSquare(i) {\n    return <Square\n      key={i}\n      value={this.props.squares[i]}\n      onClick={() => this.props.onClick(i)}\n      beautifySquare={() => this.props.beautifySquare(i)}\n    />;\n  }\n\n  render() {\n    return (\n      <div>\n        {Array.from({length: this.props.boardSize}, (item, row) => {\n          return (\n            <div key={row} className=\"board-row\">\n            {Array.from({length: this.props.boardSize}, (item, col) => {\n              return this.renderSquare(row*this.props.boardSize + col);\n            })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","const calculateWinner = squares => {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  //Check if there is a winner\n  for(let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return ({\n        winner: squares[a],\n        lineWinner: lines[i],\n        isDraw: false,\n      });\n    }\n  }\n  //Draw: All squares have been completed and therefore there is no winner\n  if(isSquareFull(squares)) {\n    return ({\n      winner: null,\n      lineWinner: null,\n      isDraw: true,\n    });\n\n  }\n  //There is no winner yet... at least one square has not been completed\n  return ({\n    winner: null,\n    lineWinner: null,\n    isDraw: false,\n  });\n};\n\nconst isSquareFull = squares => {\n  for(let i = 0; i < squares.length; i++) {\n    //At least one square is empty\n    if(!squares[i])\n      return false;\n  }\n  return true;\n};\n\nexport default calculateWinner;\n","import React, {Component} from 'react';\nimport Board from './Board';\nimport calculateWinner from './helper';\n\nconst BOARD_SIZE = 3;\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        rowClickedSquare: -1,\n        colClickedSquare: -1,\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isReversed: false,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = this.state.isReversed\n      ? history[this.state.stepNumber > 0 ? 1 : 0]\n      : history[history.length - 1]\n    const squares = current.squares.slice();\n    const winnerData = calculateWinner(current.squares);\n\n    if(winnerData.winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = this.state.stepNumber % 2 === 0 ? 'X' : 'O';\n    const newHistory = this.state.isReversed\n      ? [{\n        squares: Array(9).fill(null),\n        rowClickedSquare: -1,\n        colClickedSquare: -1,\n        }].concat([{\n          squares: squares,\n          rowClickedSquare: (Math.floor(i/3) + 1),\n          colClickedSquare: (i%3 + 1)\n        }]).concat(history.slice(1, history.length))\n      : history.concat([{\n          squares: squares,\n          rowClickedSquare: (Math.floor(i/3) + 1),\n          colClickedSquare: (i%3 + 1)\n        }])\n\n    this.setState({\n      history: newHistory,\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext && !(this.state.stepNumber % 2 === 0),\n      isReversed: this.state.isReversed\n    });\n  }\n\n  jumpTo(step) {\n    const history = this.state.isReversed && step !== 0\n      ? [{\n          squares: Array(9).fill(null),\n          rowClickedSquare: -1,\n          colClickedSquare: -1,\n        }].concat(this.state.history.slice(step, this.state.stepNumber+1))\n      : this.state.history.slice(0, step+1)\n\n    const stepNumber = this.state.isReversed\n      ? history.length-1\n      : step\n\n    const xIsNext = this.state.isReversed\n      ? (step % 2) !== 0\n      : (step % 2) === 0\n\n    this.setState({\n      history: history,\n      stepNumber: stepNumber,\n      xIsNext: xIsNext,\n      isReversed: this.state.isReversed\n    });\n  }\n\n  beautifySquare(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = this.state.isReversed\n      ? history[this.state.stepNumber > 0 ? 1 : 0]\n      : history[history.length - 1]\n    const winnerData = calculateWinner(current.squares);\n\n    const defaultSquareColor = {backgroundColor:'white'};\n    const winnerSquareColor = {backgroundColor:'green'};\n\n    if(winnerData.winner) {\n      const [a,b,c] = winnerData.lineWinner;\n      if(a === i || b === i || c === i) {\n        return winnerSquareColor;\n      }\n      return defaultSquareColor;\n    }\n\n    return defaultSquareColor;\n  }\n\n  handleSort() {\n    //Amend null row at the beginning when changing to reverse order\n    const newHistory = [{\n        squares: Array(9).fill(null),\n        rowClickedSquare: -1,\n        colClickedSquare: -1,\n      }].concat(this.state.history.slice(1, this.state.stepNumber+1).reverse())\n\n    this.setState({\n      history: newHistory,\n      stepNumber: this.state.stepNumber,\n      xIsNext: this.state.xIsNext,\n      isReversed: !this.state.isReversed\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = this.state.isReversed\n      ? history[this.state.stepNumber > 0 ? 1 : 0]\n      : history[this.state.stepNumber]\n\n    const winnerData = calculateWinner(current.squares);\n\n    const status = winnerData.winner\n      ? 'Winner: ' + winnerData.winner\n      : winnerData.isDraw\n        ? 'Draw!'\n        : 'Next player: ' + (this.state.stepNumber % 2 === 0 ? 'X' : 'O');\n\n    const moves = history.map((step, move) => {\n      const realMove = this.state.isReversed\n        ? this.state.stepNumber - move + 1\n        : move\n      const desc = move\n        ? 'Go to move #' + realMove + ' (' + step.rowClickedSquare + ',' + step.colClickedSquare + ')'\n        : 'Go to game start';\n\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    return(\n      <div>\n        <p>Welcome to the Tic-Tac-Toe Game!</p>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            <Board\n              boardSize={BOARD_SIZE}\n              squares={current.squares}\n              onClick={(i) => this.handleClick(i)}\n              beautifySquare={(i) => this.beautifySquare(i)}\n            />\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol>{moves}</ol>\n            <div>\n              <button onClick={() => this.handleSort()}>Sort Moves!</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game.js';\nimport './index.css';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}